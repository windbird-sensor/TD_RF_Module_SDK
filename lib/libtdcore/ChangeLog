# Version 1.0.0 #

  * Initial revision

# Version 1.0.1 #

  * Disable system startup banner by default in AT parser
  * Corrected behavior of "A/" (replay last command)
  * Read updated serial number just before displaying it
  * Added `TD_RTC_SetOffsetTime()`, `TD_RTC_GetOverflowCounter()` and `__time32()` for system time managment
  * Set UART RX port to totem-pole instead of GND with pull-up resistor
  * Added `TD_UART_AvailableChars()` to count the number of available UART characters
  * Added Keep-Alive handling in main idle loop
  * Bumped hardware module revision to F

# Version 2.0.0 #

  * Renamed libtd1202 to libtdcore
  * Added build configuration for GCC/IAR, Debug/Release, Tiny Gecko/Gecko
  * Implemented New module pin naming (ADC0=>USR2, ADC1=>USR3, IO1=>USR4, TIM1=>ADC0)
  * Increased AT command argument count to 9
  * Added AT£FS command to print free stack
  * Added Extended Flash FACTORY area to store 64-bit SIGFOX key
  * Changed persistence in Flash API to use FLASH_Variables
  * TD_FLASH_Init(), `TD_FLASH_DeInit()`, `TD_FLASH_WriteWord()`, `TD_FLASH_ErasePage()` are now part of public API
  * Added Extended TD_MEASURE functions to get voltages in millivolts and temperatures in tenths of degrees Celsius
  * Added `TD_MEASURE_EnableBatteryLevelMonitoring()`
  * Added PRINTF macro
  * Corrected a buffer overflow in tfp_dump()
  * Added `TD_RTC_UserAlarmAfter()` function to program a relative alarm
  * Added `TD_UART_Flush()`
  * Added TS_SCHEDULER module
  * Added `TD_RTC_Process()` function to handle keep-alive
  * Added `TD_RTC_SetOverflowHandler()`

# Version 3.0.0 #

## Minor Updates ##
  * Battery level monitoring (with IRQs) available
  * Optional printf int64 support
  * Stdlib atoll support

## Additions ##
  * Added the `WATCHDOG` module
  * Added the `AT CORE` module which implements basic "system" AT command
  * Added the `SPI` module to manage sharing of the SPI bus (multiple peripherals on the same SPI bus)
  * Added a link-time `OPTION` mechanism to customize the behavior and/or limits of binary-only objects/libraries
  * Added a fully configurable `TRAP` system to handle System/User code faults
  * Added system dumps debugging tools
  * Added a Flash logger mechanism to the `FLASH` module

## Changes ##

### Flash: ###

  * Renamed `TD_FLASH_ReadDataBuffer()` to `TD_FLASH_ReadVariable()`, kept old name as macro for compatibility
  * Renamed `TD_FLASH_DeclareFlashVariable()` to `TD_FLASH_DeclareVariable()`, kept old name as macro for compatibility
  * Renamed `TD_FLASH_UpdateFlashVariables()` to `TD_FLASH_WriteVariables()`, kept old name as macro for compatibility
  * Renamed `TD_FLASH_DeleteFlashVariables()` to `TD_FLASH_DeleteVariables()`, kept old name as macro for compatibility
  * Renamed `TD_Flash_Deinit()` to `TD_FLASH_Deinit()`, kept old name as macro for compatibility
  * Added `TD_FLASH_SetVariablesVersion()`
  * Added `TD_FLASH_DumpVariables()`
  * Added `TD_FLASH_InitLogger()`
  * Added `TD_FLASH_LoggerWrite()`
  * Added `TD_FLASH_LoggerResetRead()`
  * Added `TD_FLASH_LoggerReadNext()`

### GPIO: ###

  * The `TD_GPIO_callback_t` callback function now receive the IRQ mask as argument
  * Added `TD_GPIO_Dump()`

### MEASURE: ###

  * Removed the non-API function `TD_MEASURE_EnableBatteryLevelMonitoring()`
  * Removed the non-API function `TD_MEASURE_DisableBatteryLevelMonitoring()`

### PRINTF: ###

  * Added `tfp_printf_dump()` to dump a buffer in hexadecimal

### RTC: ###

  * Added the `TD_WakeMainLoop()` to wake up the main event loop from IRQ handlers
  * Added `TD_RTC_ClearOverflow()`

### Scheduler: ###

  * Added `TD_SCHEDULER_AppendIrq()` to use the scheduler from IRQ handling
  * Added `TD_SCHEDULER_Dump()`
  * Added `TD_ElapsedTime()`
  * Added `TD_SCHEDULER_GetTime()`
  * Added `TD_SCHEDULER_Restart()`

### stdlib: ###

  * Added `GET_BITFIELD()`
  * Added `SET_BITFIELD()`
  * Added `GET_BITFIELD_MASK()`
  * Added `atolli()`
  * Added `a2i()`
  * Added `a2d()`
  * Added `i2a()`
  * Added `ui2a()`
  * Added `li2a()`
  * Added `uli2a()`
  * Added `TD_STACK_Usage()`
  * Added `TD_IRQ_Dump()`

## Bug Fixes ##

### AT Parser: ###

  * Upon start-up, if a parser extension module has no persistent data stored, its store function will be called immediately to fix it.
  * Correction on numeric parameter read in AT command (function AT_atoll) on value with leading spaces characters eg. " `123`": the first digit was incorrectly dropped and result set to 23

### Flash: ###

  * Corrections on "user variables" handling

### GPIO: ###

  * Modification of behavior in the IRQ handling. List of I/O that actually triggered interrupt (mask) must no longer be read by `GPIO_IntGet()` but is directly passed to the to Hook callback registered for I/O interrupt handling

### System: ###

  * A fully deterministic, guaranteed main loop processing (including the `TD_USER_Loop` function) can be trigged by calling the `TD_WakeMainLoop()` function, all others systems (while(flags) processing) must be removed. `TD_WakeMainLoop()` must be used in user interrupt handlers

### RTC: ###

  * Major correction on low level function to allow calls in all possible context (background task, IRQs), with all special RTC cases handled
  * Know limitation : a call to `TD_RTC_Delay()` while in IRQ handling will result in an active wait (not energy efficient). However, calling a wait function like `TD_RTC_Delay()` in IRQ context is a bad practice

### Scheduler: ###

  * Adding a Timer is now possible in IRQ context
  * Major rewrite of the **SCHEDULER** processing to remove some race, full strengthening on `TD_SCHEDULER_AppendIrq()`, `TD_SCHEDULER_Append()`, `TD_SCHEDULER_Remove()` from anywhere in the user code, in any context

### stdlib: ###

  * `atoi` now handles correctly signed value

# Version 4.0.0 #

## Minor Updates ##

  * Swapped EEPROM and sequence Flash sectors

## Additions ##

  * Added the CAPSENSE module for capacitive touch buttons

## Changes ##

### AT Parser: ###

  * Increased maximum number of AT extensions to 16

### Config: ###

  * Added dynamic functions
  * Added early debug
  * Added bootloader configuration
  * Added stack size configuration
  * Added fined-tuned RF power computation
  * Added sensor monitoring
  * added LEUART location

### GPIO: ###

  * Unified the RF and standard GPIO management using `TD_GPIO_PinModeSet()`,
    `TD_GPIO_DriveModeSet()`
  * Replaced bit-indexed `TD_GPIO_Hooks` table by `TD_GPIO_CallbackInterrupts`
    table with dispatch mechanism
  * Added `TD_GPIO_SetCallbackExt()`

### MEASURE: ###

  * Added `TD_MEASURE_SingleVoltage()`

### PRINTF: ###
  * Added `tfp_printf_buf()`
  * Redefined `tfp_printf_dump()`
  * Added right-padding format
  * Added `get_printf()`

### RTC: ###

  * Added some RTC time constants
  * Added EFM32 power modes with `TD_RTC_GetPowerMode()`,
    `TD_RTC_SetPowerMode()` and `TD_RTC_EnterPowerMode()`
  * Added `TD_RTC_SignedTimeDiff()`

### Scheduler: ###

  * Added `TD_TimeDiff()`

### SPI: ###

  * Created simple SPI bus for Tiny Gecko with only RF chip on SPI bus
  * Added `TD_SPI_WriteReadByte()`

### TRAP: ###

  * Added `TD_CHECK_REENTRENCY_IN()`
  * Added some new trap codes
  * Added centralized system dumps
  * Added `TD_STACK_RESET`
  * Added `TD_NopHere()`
  * Added `TD_TRAP_StackProtect()`
  * Added `TD_TRAP_StackTrace()`
  * Added `TD_TRAP_StackCheck()`

### UART: ###

  * Added new port structure
  * Added `TD_UART_InitGlobal()`
  * Added `TD_UART_InitExtended()`
  * Added `TD_UART_AvailableCharsExt()`
  * Added `TD_UART_GetCharExtended()`
  * Added `TD_UART_DisableExtended()`
  * Added `TD_UART_FlushExt()`
  * Added `TD_UART_SendBuffer()`
  * Added `TD_UART_Disable()`
  * Added `TD_UART_SendRepeat()`
  * Added `TD_UART_GetStats()`

### stdlib: ###

  * Added `strcpy()`
  * Added `strcmp()`

## Bug Fixes ##

### Scheduler: ###

  * Trapped invalid timers
  * Trapped queue overflows

### UART: ###

  * Don't loose characters when flushing RX buffer
  * Signaled RX buffer overflow conditions

### Utils: ###

  * Corrected `TD_STACK_Usage()`

# Version 5.0.0 #

  * Not released publicly.

# Version 6.0.0 #

## Minor Updates ##

  * None

## Additions ##

  * Added support for TD1508 (FCC)
  * Added support for reference design (both ETSI and FCC)

### AT Core: ###

  * Added variable baudrate and full/half duplex modes

## Changes ##

### AT Parser: ###

  * Added `AT_Echo()`
  * Added `AT_FactoryExec()` to perform a factory reset with C API

### CAPSENSE: ###

  * Added `TD_CAPSENSE_GetValue()`
  * share TIMER and PRS resources by re-initializing them for each measure

### Config: ###

  * Split link time configuration into multiple files

### FLASH: ###

  * Added a link-time Flash layout mechanism
  * Added `TD_FLASH_DumpLayout()`
  * Added `TD_FLASH_CheckSize()`

### GPIO: ###

### MEASURE: ###

  * Added `TD_MEASURE_VoltageConvert()`

### PRINTF: ###

  * Added stream support
  * Added long long support
  * Added `init_printf_stream()`
  * Added `tfp_printf_stream()`

### RTC: ###

  * Renamed `TD_RTC_SetPowerMode()` into `TD_RTC_SetPowerModeInternal()`

### Scheduler: ###

  * Added `TD_TimeDiff()`

### SPI: ###

  * Added a context for locking the SPI bus
  * Added `TD_SPI_FullWriteBuffer()` for multiple writes

### TRAP: ###

  * Added `TD_TRAP_EFM_ASSERT_Get()` to handle assertion failures using a trap

### UART: ###

  * Major changes in order to support streams

### stdlib: ###

  * Added support for long long integers using `ulli2a()` and `lli2a()`

## Bug Fixes ##

### MEASURE: ###

  * Corrected drift in voltage measurement

# Version 4.0.0 #

## Additions ##
  * Added TD1205P, RefDesign ETSI and RefDesign FCC configurations
  * Added the Capsense configuration module

## Changes ##

### SPI: ###

  * Change protype of `TD_SPI_FullGenericReadWrite` function

### TRAP: ###

  * Added `EZR32LG230F128` chip managment

### UART: ###
  * Added `TD_UART_WaitForPendingTx` function
  * Added synchronisation for all pending uart when changing baud rate